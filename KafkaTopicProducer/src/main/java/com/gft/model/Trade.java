/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.gft.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Trade extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7603914363651023301L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Trade\",\"namespace\":\"com.gft.model\",\"fields\":[{\"name\":\"tradeId\",\"type\":\"int\"},{\"name\":\"version\",\"type\":\"int\"},{\"name\":\"fraRate\",\"type\":\"double\"},{\"name\":\"referenceRate\",\"type\":\"double\"},{\"name\":\"amount\",\"type\":\"double\"},{\"name\":\"currency\",\"type\":\"string\"},{\"name\":\"valid\",\"type\":\"boolean\"},{\"name\":\"validationResults\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Trade> ENCODER =
      new BinaryMessageEncoder<Trade>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Trade> DECODER =
      new BinaryMessageDecoder<Trade>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Trade> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Trade> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Trade>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Trade to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Trade from a ByteBuffer. */
  public static Trade fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int tradeId;
  @Deprecated public int version;
  @Deprecated public double fraRate;
  @Deprecated public double referenceRate;
  @Deprecated public double amount;
  @Deprecated public java.lang.CharSequence currency;
  @Deprecated public boolean valid;
  @Deprecated public java.util.List<java.lang.CharSequence> validationResults;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Trade() {}

  /**
   * All-args constructor.
   * @param tradeId The new value for tradeId
   * @param version The new value for version
   * @param fraRate The new value for fraRate
   * @param referenceRate The new value for referenceRate
   * @param amount The new value for amount
   * @param currency The new value for currency
   * @param valid The new value for valid
   * @param validationResults The new value for validationResults
   */
  public Trade(java.lang.Integer tradeId, java.lang.Integer version, java.lang.Double fraRate, java.lang.Double referenceRate, java.lang.Double amount, java.lang.CharSequence currency, java.lang.Boolean valid, java.util.List<java.lang.CharSequence> validationResults) {
    this.tradeId = tradeId;
    this.version = version;
    this.fraRate = fraRate;
    this.referenceRate = referenceRate;
    this.amount = amount;
    this.currency = currency;
    this.valid = valid;
    this.validationResults = validationResults;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return tradeId;
    case 1: return version;
    case 2: return fraRate;
    case 3: return referenceRate;
    case 4: return amount;
    case 5: return currency;
    case 6: return valid;
    case 7: return validationResults;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: tradeId = (java.lang.Integer)value$; break;
    case 1: version = (java.lang.Integer)value$; break;
    case 2: fraRate = (java.lang.Double)value$; break;
    case 3: referenceRate = (java.lang.Double)value$; break;
    case 4: amount = (java.lang.Double)value$; break;
    case 5: currency = (java.lang.CharSequence)value$; break;
    case 6: valid = (java.lang.Boolean)value$; break;
    case 7: validationResults = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'tradeId' field.
   * @return The value of the 'tradeId' field.
   */
  public java.lang.Integer getTradeId() {
    return tradeId;
  }

  /**
   * Sets the value of the 'tradeId' field.
   * @param value the value to set.
   */
  public void setTradeId(java.lang.Integer value) {
    this.tradeId = value;
  }

  /**
   * Gets the value of the 'version' field.
   * @return The value of the 'version' field.
   */
  public java.lang.Integer getVersion() {
    return version;
  }

  /**
   * Sets the value of the 'version' field.
   * @param value the value to set.
   */
  public void setVersion(java.lang.Integer value) {
    this.version = value;
  }

  /**
   * Gets the value of the 'fraRate' field.
   * @return The value of the 'fraRate' field.
   */
  public java.lang.Double getFraRate() {
    return fraRate;
  }

  /**
   * Sets the value of the 'fraRate' field.
   * @param value the value to set.
   */
  public void setFraRate(java.lang.Double value) {
    this.fraRate = value;
  }

  /**
   * Gets the value of the 'referenceRate' field.
   * @return The value of the 'referenceRate' field.
   */
  public java.lang.Double getReferenceRate() {
    return referenceRate;
  }

  /**
   * Sets the value of the 'referenceRate' field.
   * @param value the value to set.
   */
  public void setReferenceRate(java.lang.Double value) {
    this.referenceRate = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public java.lang.Double getAmount() {
    return amount;
  }

  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(java.lang.Double value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'currency' field.
   * @return The value of the 'currency' field.
   */
  public java.lang.CharSequence getCurrency() {
    return currency;
  }

  /**
   * Sets the value of the 'currency' field.
   * @param value the value to set.
   */
  public void setCurrency(java.lang.CharSequence value) {
    this.currency = value;
  }

  /**
   * Gets the value of the 'valid' field.
   * @return The value of the 'valid' field.
   */
  public java.lang.Boolean getValid() {
    return valid;
  }

  /**
   * Sets the value of the 'valid' field.
   * @param value the value to set.
   */
  public void setValid(java.lang.Boolean value) {
    this.valid = value;
  }

  /**
   * Gets the value of the 'validationResults' field.
   * @return The value of the 'validationResults' field.
   */
  public java.util.List<java.lang.CharSequence> getValidationResults() {
    return validationResults;
  }

  /**
   * Sets the value of the 'validationResults' field.
   * @param value the value to set.
   */
  public void setValidationResults(java.util.List<java.lang.CharSequence> value) {
    this.validationResults = value;
  }

  /**
   * Creates a new Trade RecordBuilder.
   * @return A new Trade RecordBuilder
   */
  public static com.gft.model.Trade.Builder newBuilder() {
    return new com.gft.model.Trade.Builder();
  }

  /**
   * Creates a new Trade RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Trade RecordBuilder
   */
  public static com.gft.model.Trade.Builder newBuilder(com.gft.model.Trade.Builder other) {
    return new com.gft.model.Trade.Builder(other);
  }

  /**
   * Creates a new Trade RecordBuilder by copying an existing Trade instance.
   * @param other The existing instance to copy.
   * @return A new Trade RecordBuilder
   */
  public static com.gft.model.Trade.Builder newBuilder(com.gft.model.Trade other) {
    return new com.gft.model.Trade.Builder(other);
  }

  /**
   * RecordBuilder for Trade instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Trade>
    implements org.apache.avro.data.RecordBuilder<Trade> {

    private int tradeId;
    private int version;
    private double fraRate;
    private double referenceRate;
    private double amount;
    private java.lang.CharSequence currency;
    private boolean valid;
    private java.util.List<java.lang.CharSequence> validationResults;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.gft.model.Trade.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.tradeId)) {
        this.tradeId = data().deepCopy(fields()[0].schema(), other.tradeId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.version)) {
        this.version = data().deepCopy(fields()[1].schema(), other.version);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.fraRate)) {
        this.fraRate = data().deepCopy(fields()[2].schema(), other.fraRate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.referenceRate)) {
        this.referenceRate = data().deepCopy(fields()[3].schema(), other.referenceRate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.amount)) {
        this.amount = data().deepCopy(fields()[4].schema(), other.amount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.currency)) {
        this.currency = data().deepCopy(fields()[5].schema(), other.currency);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.valid)) {
        this.valid = data().deepCopy(fields()[6].schema(), other.valid);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.validationResults)) {
        this.validationResults = data().deepCopy(fields()[7].schema(), other.validationResults);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Trade instance
     * @param other The existing instance to copy.
     */
    private Builder(com.gft.model.Trade other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.tradeId)) {
        this.tradeId = data().deepCopy(fields()[0].schema(), other.tradeId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.version)) {
        this.version = data().deepCopy(fields()[1].schema(), other.version);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.fraRate)) {
        this.fraRate = data().deepCopy(fields()[2].schema(), other.fraRate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.referenceRate)) {
        this.referenceRate = data().deepCopy(fields()[3].schema(), other.referenceRate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.amount)) {
        this.amount = data().deepCopy(fields()[4].schema(), other.amount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.currency)) {
        this.currency = data().deepCopy(fields()[5].schema(), other.currency);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.valid)) {
        this.valid = data().deepCopy(fields()[6].schema(), other.valid);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.validationResults)) {
        this.validationResults = data().deepCopy(fields()[7].schema(), other.validationResults);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'tradeId' field.
      * @return The value.
      */
    public java.lang.Integer getTradeId() {
      return tradeId;
    }

    /**
      * Sets the value of the 'tradeId' field.
      * @param value The value of 'tradeId'.
      * @return This builder.
      */
    public com.gft.model.Trade.Builder setTradeId(int value) {
      validate(fields()[0], value);
      this.tradeId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'tradeId' field has been set.
      * @return True if the 'tradeId' field has been set, false otherwise.
      */
    public boolean hasTradeId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'tradeId' field.
      * @return This builder.
      */
    public com.gft.model.Trade.Builder clearTradeId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'version' field.
      * @return The value.
      */
    public java.lang.Integer getVersion() {
      return version;
    }

    /**
      * Sets the value of the 'version' field.
      * @param value The value of 'version'.
      * @return This builder.
      */
    public com.gft.model.Trade.Builder setVersion(int value) {
      validate(fields()[1], value);
      this.version = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'version' field has been set.
      * @return True if the 'version' field has been set, false otherwise.
      */
    public boolean hasVersion() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'version' field.
      * @return This builder.
      */
    public com.gft.model.Trade.Builder clearVersion() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'fraRate' field.
      * @return The value.
      */
    public java.lang.Double getFraRate() {
      return fraRate;
    }

    /**
      * Sets the value of the 'fraRate' field.
      * @param value The value of 'fraRate'.
      * @return This builder.
      */
    public com.gft.model.Trade.Builder setFraRate(double value) {
      validate(fields()[2], value);
      this.fraRate = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'fraRate' field has been set.
      * @return True if the 'fraRate' field has been set, false otherwise.
      */
    public boolean hasFraRate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'fraRate' field.
      * @return This builder.
      */
    public com.gft.model.Trade.Builder clearFraRate() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'referenceRate' field.
      * @return The value.
      */
    public java.lang.Double getReferenceRate() {
      return referenceRate;
    }

    /**
      * Sets the value of the 'referenceRate' field.
      * @param value The value of 'referenceRate'.
      * @return This builder.
      */
    public com.gft.model.Trade.Builder setReferenceRate(double value) {
      validate(fields()[3], value);
      this.referenceRate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'referenceRate' field has been set.
      * @return True if the 'referenceRate' field has been set, false otherwise.
      */
    public boolean hasReferenceRate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'referenceRate' field.
      * @return This builder.
      */
    public com.gft.model.Trade.Builder clearReferenceRate() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public java.lang.Double getAmount() {
      return amount;
    }

    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public com.gft.model.Trade.Builder setAmount(double value) {
      validate(fields()[4], value);
      this.amount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public com.gft.model.Trade.Builder clearAmount() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'currency' field.
      * @return The value.
      */
    public java.lang.CharSequence getCurrency() {
      return currency;
    }

    /**
      * Sets the value of the 'currency' field.
      * @param value The value of 'currency'.
      * @return This builder.
      */
    public com.gft.model.Trade.Builder setCurrency(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.currency = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'currency' field has been set.
      * @return True if the 'currency' field has been set, false otherwise.
      */
    public boolean hasCurrency() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'currency' field.
      * @return This builder.
      */
    public com.gft.model.Trade.Builder clearCurrency() {
      currency = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'valid' field.
      * @return The value.
      */
    public java.lang.Boolean getValid() {
      return valid;
    }

    /**
      * Sets the value of the 'valid' field.
      * @param value The value of 'valid'.
      * @return This builder.
      */
    public com.gft.model.Trade.Builder setValid(boolean value) {
      validate(fields()[6], value);
      this.valid = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'valid' field has been set.
      * @return True if the 'valid' field has been set, false otherwise.
      */
    public boolean hasValid() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'valid' field.
      * @return This builder.
      */
    public com.gft.model.Trade.Builder clearValid() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'validationResults' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getValidationResults() {
      return validationResults;
    }

    /**
      * Sets the value of the 'validationResults' field.
      * @param value The value of 'validationResults'.
      * @return This builder.
      */
    public com.gft.model.Trade.Builder setValidationResults(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[7], value);
      this.validationResults = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'validationResults' field has been set.
      * @return True if the 'validationResults' field has been set, false otherwise.
      */
    public boolean hasValidationResults() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'validationResults' field.
      * @return This builder.
      */
    public com.gft.model.Trade.Builder clearValidationResults() {
      validationResults = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Trade build() {
      try {
        Trade record = new Trade();
        record.tradeId = fieldSetFlags()[0] ? this.tradeId : (java.lang.Integer) defaultValue(fields()[0]);
        record.version = fieldSetFlags()[1] ? this.version : (java.lang.Integer) defaultValue(fields()[1]);
        record.fraRate = fieldSetFlags()[2] ? this.fraRate : (java.lang.Double) defaultValue(fields()[2]);
        record.referenceRate = fieldSetFlags()[3] ? this.referenceRate : (java.lang.Double) defaultValue(fields()[3]);
        record.amount = fieldSetFlags()[4] ? this.amount : (java.lang.Double) defaultValue(fields()[4]);
        record.currency = fieldSetFlags()[5] ? this.currency : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.valid = fieldSetFlags()[6] ? this.valid : (java.lang.Boolean) defaultValue(fields()[6]);
        record.validationResults = fieldSetFlags()[7] ? this.validationResults : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[7]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Trade>
    WRITER$ = (org.apache.avro.io.DatumWriter<Trade>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Trade>
    READER$ = (org.apache.avro.io.DatumReader<Trade>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
